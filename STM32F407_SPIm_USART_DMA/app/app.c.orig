#include "app.h"

#define SIZESTRS1 1

uint8_t sizeSPI=SIZESTRS1;
uint32_t dataBufSPI=0xAA;
uint32_t dataBufSPIRx;
uint8_t _filler = 0x2E;
uint8_t tst;
uint8_t i;

uint8_t txBuffer[] = {0xAB}; // Данные для передачи
uint8_t rxBuffer[1]; // Буфер для приема данных
uint8_t dataIn=0xAA;
uint8_t data1;


void DMA1_Stream4_IRQHandler(void)
{
    LED7();
    if (DMA1->HISR & DMA_HISR_TCIF4)
    {
        DMA1->HIFCR |= DMA_HIFCR_CTCIF4; // Сбрасываем флаг
    }
}

void DMA1_Stream3_IRQHandler(void)
{
    LED6();
		
    if (DMA1->LISR & DMA_LISR_TCIF3)
    {
				if(data1 != Read_SPI2_DMA())
				{
						data1=Read_SPI2_DMA();
						snprintf(rezultStr, sizeof rezultStr, "%s: %c", set_infoStr,data1);
						DMA2_SetString(rezultStr);
				}
        DMA1->LIFCR |= DMA_LIFCR_CTCIF3; // Сбрасываем флаг
    }
}
/////////////////
void DMA2_Stream7_IRQHandler(void)
{
    if ((DMA2->HISR & DMA_HISR_TCIF7) == DMA_HISR_TCIF7)
    {
        DMA2->HIFCR |= DMA_HIFCR_CTCIF7;
    }
    LED7();
}

void DMA2_Stream2_IRQHandler(void)
{
    if ((DMA2->LISR & DMA_LISR_TCIF2) == DMA_LISR_TCIF2)
		{
				ExecutorTerminal();
        DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
				LED6();
    }
    
}

void ExecutorTerminal()
{
        receivedChar = DMA2_ReadChar(); // Читаем
				dataIn=receivedChar;

}

/////////////////

int main()
{
    Init_LED();
		Init_USART1(BAUND_RATE);
    Init_SPI();
		
    while(1)
    {
        i++;
				SPI2_DMA_TransmitReceive(dataIn,1);
        
        if(i>20)
        {
            i=0;
        }
        //tst = SPI2_TransmitReceive(0xDF);
    }
    return 0;
}

